<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashmetanode.github.io/news/article-110342.htm" />
    <title>java多线程[5]：信号量(Semaphore)</title>
        <meta name="description" content="Semaphore通过计数器来控制对一个共享资源的访问，它的工作机制是：当一个线程想要访问一个共享资源时，需要向Semaphore申请访问权限，如果Semaphore的计数器大于0，则线程获得共享资源" />
        <link rel="icon" href="/assets/website/img/clashmetanode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashMetaNode官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashmetanode.github.io/news/article-110342.htm" />
    <meta property="og:site_name" content="ClashMetaNode官方节点站" />
    <meta property="og:title" content="java多线程[5]：信号量(Semaphore)" />
    <meta property="og:image" content="https://clashmetanode.github.io/uploads/20240413/8ff6cbcd33823d619a87c818b6ced094.webp" />
        <meta property="og:release_date" content="2025-05-03T10:28:09" />
    <meta property="og:updated_time" content="2025-05-03T10:28:09" />
        <meta property="og:description" content="Semaphore通过计数器来控制对一个共享资源的访问，它的工作机制是：当一个线程想要访问一个共享资源时，需要向Semaphore申请访问权限，如果Semaphore的计数器大于0，则线程获得共享资源" />
        
    <link href="/assets/website/css/clashmetanode/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/website/css/clashmetanode/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/website/css/clashmetanode/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="java多线程[5]：信号量(Semaphore)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <!-- script -->
    <script src="/assets/website/js/frontend/clashmetanode/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/clashmetanode/move-top.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/clashmetanode/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/website/css/clashmetanode/jquery.mmenu.all.css" />
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/website/js/frontend/clashmetanode/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LFCZ6X6RGC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-LFCZ6X6RGC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>java多线程[5]：信号量(Semaphore)</h1>
                <p>
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/free-nodes/">免费节点</a></li>
                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                <li><a href="/client.htm">客户端</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news" id="xcblog-blog-defined">
                                            <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-dracula"> <p>Semaphore通过计数器来控制对一个共享资源的访问，它的工作机制是：当一个线程想要访问一个共享资源时，需要向Semaphore申请访问权限，如果Semaphore的计数器大于0，则线程获得共享资源的访问权限，此时Semaphore的计数器减一。当该线程使用完共享资源后，需要释放访问权限，此时Semaphore的计数器加一。如果一个线程在申请访问权限时Semaphore的计数器为0，则当前线程就会自动挂起，直到另一个线程释放一个访问权限后，当前线程获取访问权限并恢复运行。</p> </h1> <p>Semaphore的用法比较简单，下面看一下它的构造方法和常用方法。</p> <h3 id="构造方法">构造方法</h3> <p>Semaphore有两个构造函数，第一个指定了计数器的个数，如果设置为1的话，则只有1个线程可以同时获取到共享资源。第二个重载的第二个参数如果设置为true，则先申请访问权限的线程会保证先得到访问权限。</p> <pre class="prettyprint"><code class="hljs java">Semaphore(<span class="hljs-keyword">int</span> num) Semaphore(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">boolean</span> how)</code></pre> <h3 id="申请权限">申请权限</h3> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">void</span> acquire( ) <span class="hljs-keyword">throws</span> InterruptedException <span class="hljs-keyword">void</span> acquire(<span class="hljs-keyword">int</span> num) <span class="hljs-keyword">throws</span> InterruptedException</code></pre> <p>acquire方法默认申请1个访问权限，也可以通过第二个重载来一次申请多个访问权限。</p> <h3 id="释放权限">释放权限</h3> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">void</span> release( ) <span class="hljs-keyword">void</span> release(<span class="hljs-keyword">int</span> num)</code></pre> <p>同acquire一样，release方法默认释放一个访问权限，也可以通过第二个重载版本来一次释放多个访问权限。</p> </h1> <p>下面来看一个例子，假设有一个全局范围内的数字作为共享资源，有三个线程需要访问这个数字来做一个处理，每次处理的时间比较长，并且并发运行的话可能会影响最终的处理结果，所以要通过Semaphore来阻止并发。下面这个类作为共享资源</p> <pre class="prettyprint"><code class="hljs vala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shared</span> {<!-- --></span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> resources = <span class="hljs-number">0</span>; }</code></pre> <p>下面这个类实现了Runable接口，它表示一个需要访问共享资源的线程</p> <pre class="prettyprint"><code class="hljs axapta"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-inheritance"><span class="hljs-keyword">implements</span></span> <span class="hljs-title">Runnable</span> {<!-- --></span>      String name;     Semaphore semaphore;      <span class="hljs-keyword">public</span> MyThread(String name, Semaphore semaphore) {         <span class="hljs-keyword">this</span>.name = name;         <span class="hljs-keyword">this</span>.semaphore = semaphore;         <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>).start();     }      @Override     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run() {         System.out.println(name + <span class="hljs-string">" want a permit"</span>);         <span class="hljs-keyword">try</span> {             semaphore.acquire();         } <span class="hljs-keyword">catch</span> (InterruptedException e) {             e.printStackTrace();         }         System.out.println(name + <span class="hljs-string">" get a permit"</span>);         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {             Shared.resources++;             System.out.println(<span class="hljs-string">"shared resources now is "</span> + Shared.resources + <span class="hljs-string">", by "</span> + name);             <span class="hljs-keyword">try</span> {                 Thread.sleep(<span class="hljs-number">500</span>);             } <span class="hljs-keyword">catch</span> (InterruptedException e) {                 e.printStackTrace();             }         }         System.out.println(name + <span class="hljs-string">"release a permit"</span>);         semaphore.release();     } }</code></pre> <p>这个线程先通过<code>semaphore.acquire()</code>获取到访问权限，然后长时间占有共享资源，最终通过<code>semaphore.release();</code>释放访问权限。</p> <p>下面是main方法</p> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {     Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);     <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"thread a"</span>, semaphore);     <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"thread b"</span>, semaphore);     <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"thread c"</span>, semaphore);  }</code></pre> <p>它首先创建了一个计数器为1的Semaphore，然后实例化了三个MyThread对象，该对象实例化后会自动运行线程。从输出结果可以看出，Semaphore有效地阻止了访问公共资源的代码的并发。下面是代码的输出</p> <pre class="prettyprint"><code class="hljs vbnet">thread b want a permit thread a want a permit thread c want a permit thread b <span class="hljs-keyword">get</span> a permit <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">3</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">4</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">5</span>, <span class="hljs-keyword">by</span> thread b thread b release a permit thread a <span class="hljs-keyword">get</span> a permit <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">6</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">7</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">8</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">9</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">10</span>, <span class="hljs-keyword">by</span> thread a thread a release a permit thread c <span class="hljs-keyword">get</span> a permit <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">12</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">13</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">14</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">15</span>, <span class="hljs-keyword">by</span> thread c thread c release a permit</code></pre> </h1> <p>除了并发控制以外，Semaphore还可以用来做线程间的通信。以生产者和消费者为例，假设生产者持有消费者的一个访问权限，导致消费者无法进行消费，当生产者完成生产后，释放这个访问权限，消费者就可以消费了，同时，消费者还可以持有一个生产者的访问权限，在消费完之后再释放，从而通知生产者继续生产。这有点类似wait和notify。下面来看如何通过Semaphore来实现这个场景。</p> <p>首先来看一个队列</p> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Queue {     <span class="hljs-keyword">private</span> Semaphore semaphoreConsumer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">0</span>);     <span class="hljs-keyword">private</span> Semaphore semaphoreProducer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);     <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>;     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>) throws InterruptedException {         semaphoreProducer.acquire();         <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"----------  value is put "</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span>);         semaphoreConsumer.release();     }      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span>() throws InterruptedException {         semaphoreConsumer.acquire();         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"**********  value is get "</span> + <span class="hljs-keyword">value</span>);         semaphoreProducer.release();     } }</code></pre> <p>这个类中包含两个Semaphore对象，一个用于控制生产者的生产，另一个用于控制消费者的消费，用于控制消费的Semaphore默认的计数器是0，表示消费者默认是不能消费的，只有等生产者release一个访问权限后，计数器会加一，此时消费者才可以拿到访问权限并开始消费。下面是生产者和消费者，他们内部只管不停地生产或消费即可</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> {<!-- --></span>     Queue queue;     <span class="hljs-keyword">public</span> <span class="hljs-title">Producer</span>(Queue queue) {         <span class="hljs-keyword">this</span>.queue = queue;         <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>).start();     }      <span class="hljs-annotation">@Override</span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>() {         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {             <span class="hljs-keyword">try</span> {                 queue.put(i + <span class="hljs-number">1</span>);             } <span class="hljs-keyword">catch</span> (InterruptedException e) {                 e.printStackTrace();             }         }     } }</code></pre> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Queue {     <span class="hljs-keyword">private</span> Semaphore semaphoreConsumer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">0</span>);     <span class="hljs-keyword">private</span> Semaphore semaphoreProducer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);     <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>;     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>) throws InterruptedException {         semaphoreProducer.acquire();         <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"----------  value is put "</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span>);         semaphoreConsumer.release();     }      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span>() throws InterruptedException {         semaphoreConsumer.acquire();         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"**********  value is get "</span> + <span class="hljs-keyword">value</span>);         semaphoreProducer.release();     } }</code></pre> <p>下面是main方法</p> <pre class="prettyprint"><code class="hljs cpp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) {     Queue <span class="hljs-built_in">queue</span> = <span class="hljs-keyword">new</span> Queue();     <span class="hljs-keyword">new</span> Consumer(<span class="hljs-built_in">queue</span>);     <span class="hljs-keyword">new</span> Producer(<span class="hljs-built_in">queue</span>); }</code></pre> <p>下面是代码的输出</p> <pre class="prettyprint"><code class="hljs cs">----------  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> put <span class="hljs-number">1</span> **********  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">get</span> <span class="hljs-number">1</span> ----------  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> put <span class="hljs-number">2</span> **********  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">get</span> <span class="hljs-number">2</span> ----------  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> put <span class="hljs-number">3</span> **********  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">get</span> <span class="hljs-number">3</span> ......</code></pre> </p></div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-109525.htm">基于知名微服务框架go-micro开发gRPC应用程序</a></p>
                                        <p>下一个：<a href="/news/article-110343.htm">gofs使用教程基于golang的开源跨平台文件同步工具</a></p>
                                    </div>
                                        </div>
                    </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-99974.htm" title="掌握JavaScript中的迭代器和生成器，顺便了解一下async、await的原理">掌握JavaScript中的迭代器和生成器，顺便了解一下async、await的原理</a></li>
                        <li class="py-2"><a href="/news/article-96262.htm" title="宠物领养协议书范本图片模板下载（宠物领养协议免费下载）">宠物领养协议书范本图片模板下载（宠物领养协议免费下载）</a></li>
                        <li class="py-2"><a href="/news/article-101339.htm" title="国考公务员2021年报名时间表（国考公务员2021年报名时间截止）">国考公务员2021年报名时间表（国考公务员2021年报名时间截止）</a></li>
                        <li class="py-2"><a href="/news/article-98430.htm" title="宠物领养网站的意义 宠物领养网站的意义是什么">宠物领养网站的意义 宠物领养网站的意义是什么</a></li>
                        <li class="py-2"><a href="/news/article-90246.htm" title="成都领养宠物中心电话号码（成都领养宠物中心电话号码是多少）">成都领养宠物中心电话号码（成都领养宠物中心电话号码是多少）</a></li>
                        <li class="py-2"><a href="/news/article-110342.htm" title="java多线程[5]：信号量(Semaphore)">java多线程[5]：信号量(Semaphore)</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-5-3-clash-node.htm" title="「5月3日」最高速度22.1M/S，2025年最新高速Clash-Meta免费节点订阅链接">「5月3日」最高速度22.1M/S，2025年最新高速Clash-Meta免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-2-free-shadowrocket-node.htm" title="「4月2日」最高速度19M/S，2025年最新高速Clash-Meta免费节点订阅链接">「4月2日」最高速度19M/S，2025年最新高速Clash-Meta免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-92486.htm" title="狗狗免费领养文案（狗狗免费领养文案简短）">狗狗免费领养文案（狗狗免费领养文案简短）</a></li>
                        <li class="py-2"><a href="/news/article-104561.htm" title="Java-Day05 函数、函数重载、递归函数">Java-Day05 函数、函数重载、递归函数</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">16</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p>
                ClashMetaNode官方节点站 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>